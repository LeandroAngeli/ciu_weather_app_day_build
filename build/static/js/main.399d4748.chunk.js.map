{"version":3,"sources":["app_component/weather_component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","className","temp_celsius","min","temp_min","max","temp_max","descriptionDay","App","getWeather","a","fetch","api_call","json","response","console","log","setState","celsius","calCelsius","daily","temp","day","weather","state","icon","undefined","main","error","Math","floor","this","description","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAiCeA,MA7BC,SAAAC,GACZ,OACI,qBAAKC,UAAY,YAAjB,SACI,sBAAKA,UAAY,QAAjB,UACI,gDACA,oBAAIA,UAAU,OAAd,SACI,mBAAGA,UAAY,gCAEnB,qBAAIA,UAAU,MAAd,UAAqBD,EAAME,aAA3B,WAWIC,EATQH,EAAMI,SASTC,EATkBL,EAAMM,SAWzC,+BACI,uBAAML,UAAU,MAAhB,UAAuBE,EAAvB,UACA,uBAAMF,UAAU,MAAhB,UAAuBI,EAAvB,cAZI,oBAAIJ,UAAU,MAAd,SAAqBD,EAAMO,sBAQ3C,IAAoBJ,EAAKE,GCuCVG,G,wDAlDb,aAAc,IAAD,8BACX,gBAoBFC,WArBa,sBAqBA,8BAAAC,EAAA,sEACYC,MAAM,+IADlB,cACLC,EADK,gBAGYA,EAASC,OAHrB,OAGLC,EAHK,OAIXC,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACZC,QAAU,EAAKC,WAAWL,EAASM,MAAO,GAAGC,KAAKC,KAClDhB,SAAW,EAAKa,WAAWL,EAASM,MAAO,GAAGC,KAAKhB,KACnDD,SAAW,EAAKe,WAAWL,EAASM,MAAO,GAAGC,KAAKlB,KACnDI,eAAiBO,EAASM,MAAO,GAAGG,QAAS,KAVpC,2CArBA,EAkCbC,MAAQ,GAhCN,EAAKA,MAAQ,CACXC,UAAOC,EACPC,UAAOD,EACPR,aAAUQ,EACVpB,cAAWoB,EACXtB,cAAWsB,EACXnB,eAAiB,GACjBqB,OAAQ,GAEV,EAAKnB,aAXM,E,8CAgBb,SAAWY,GAET,OADWQ,KAAKC,MAAMT,EAAO,U,oBAkB/B,WACE,OACE,qBAAKpB,UAAW,MAAhB,SACA,cAAC,EAAD,CACAC,aAAc6B,KAAKP,MAAMN,QACzBZ,SAAYyB,KAAKP,MAAMlB,SACvBF,SAAY2B,KAAKP,MAAMpB,SACvB4B,YAAeD,KAAKP,MAAMQ,oB,GA3CdC,IAAMC,YCCTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.399d4748.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst Weather = props => {\n    return(\n        <div className = \"container\">\n            <div className = \"cards\">\n                <h1>William Morris</h1>\n                <h5 className=\"py-4\">\n                    <i className = \"wi wi-day-sunny display-1\" />\n                </h5>\n                <h1 className=\"py2\">{props.temp_celsius}&deg;</h1>\n\n                {minMaxTemp(props.temp_min,props.temp_max)}\n                <h4 className=\"py3\">{props.descriptionDay}</h4>\n            </div>\n        </div>\n    );\n\n}\n\n\nfunction minMaxTemp(min, max){\n    return(\n        <h3>\n            <span className=\"px4\">{min}&deg;</span>\n            <span className=\"px4\">{max}&deg;</span>\n        </h3>\n    )\n\n}\n\nexport default Weather; ","import React from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from \"./app_component/weather_component\";\nimport \"weather-icons/css/weather-icons.css\";\n\n\n//Api a usar = https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}\n//-34.576531, -58.648291\n//API_Key = \"a0c9e2645798d486f9bd63caafbaf2f9\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      icon : undefined,\n      main : undefined,\n      celsius : undefined,\n      temp_max : undefined,\n      temp_min : undefined,\n      descriptionDay : \"\",\n      error : false, \n    };\n    this.getWeather();\n\n    \n  }\n\n  calCelsius(temp){\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async () => {\n    const api_call = await fetch('https://api.openweathermap.org/data/2.5/onecall?lat=-34.576531&lon=-58.648291&exclude=current,hourly&appid=a0c9e2645798d486f9bd63caafbaf2f9')\n\n    const response = await api_call.json();\n    console.log(response);\n\n    this.setState({\n      celsius : this.calCelsius(response.daily.[0].temp.day),\n      temp_max : this.calCelsius(response.daily.[0].temp.max),\n      temp_min : this.calCelsius(response.daily.[0].temp.min),\n      descriptionDay : response.daily.[0].weather.[0],\n    })\n  }\n  state = {}\n  render (){\n    return(\n      <div className =\"App\">\n      <Weather \n      temp_celsius={this.state.celsius}\n      temp_max = {this.state.temp_max}\n      temp_min = {this.state.temp_min}\n      description = {this.state.description}\n      />\n    </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}